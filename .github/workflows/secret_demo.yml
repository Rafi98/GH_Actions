name: Secret Workflow

on:
  push:
    branches:
      - main


  #workflow_dispatch:
   # inputs:
    #  secret_value:
     #   description: 'Secret value input'
      #  required: true

  
jobs:
  #Workflow_inputvalue:
   # runs-on: ubuntu-latest
    #steps:
     # - name: Use Input Secret Value
      #  run: echo "Secret Value is ${{ secrets.MY_SECRET }}"
       # env:
        #  MY_SECRET: ${{ secrets.MY_SECRET }}


  Print_secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Decrypt value
        run: |
          # Custom script or command to decrypt the value
          decrypted_value=$(echo "${{ secrets.MY_SECRET }}" | base64 -d)
          echo "Decrypted value is $decrypted_value"

  
  
  update_secret:
    runs-on: ubuntu-latest
    steps:

      # Install OpenSSL
      - name: Install OpenSSL
        run: sudo apt-get update && sudo apt-get install -y openssl
        
      - name: Encrypt secret value
        run: |
          # Encrypt the secret value
          #encrypted_value=$(echo -n "aGVsbG8=" | openssl enc -aes-256-cbc -e -base64 -pass pass:"encryption_password")
          # Encrypt the secret value
            encrypted_value=$(echo -n "aGVsbG8=" | openssl enc -aes-256-cbc -e -base64 -K $(openssl rand -hex 32))
          
          # Update the secret in the repository using gh CLI
          gh secret set MY_SECRET --body "$encrypted_value" --repository Rafi98/GH_Actions
  
  
  
  
  
  
  
  
  
  encrypt_value:
    runs-on: ubuntu-latest
    steps:
      - name: Encrypt secret value
        id: encrypt_secret
        run: |
          # Generate a random secret value
          secret_value="aGVsbG8="
          
          # Encrypt the secret using OpenSSL
          #encrypted_value=$(echo -n "$secret_value" | openssl aes-256-cbc -e -a -k "${{ secrets.ENCRYPTION_KEY }}")
           encrypted_value=$(echo -n "$secret_value" | openssl enc -aes-256-cbc -e -a -pbkdf2 -k "${ENCRYPTION_KEY}")
  
  
  
  
  
  
  
  
  Encrypted_Secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Convert secret value to base64
        run: |
          # Encode the secret value to base64
          encoded_value=$(echo -n "${{ secrets.MY_SECRET }}" | base64)
          echo "Encoded value is $encoded_value"

  
  
  print-secrets:
   runs-on: ubuntu-latest
   steps:
      - name: Secret_Value
        env:
          MY_VAL: ${{ secrets.MY_SECRET }}
        run: |
          import os
          for q in (os.getenv("MY_VAL")):
            print(q)
        shell: python

  Install_gh_CLI:
    runs-on: ubuntu-latest
   
    steps:
    - name: Install gh CLI
      run: |
          # Install gh CLI
          sudo mkdir -p -m 755 /etc/apt/keyrings && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
          && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      
  login:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh auth login --with-token <<<"${GH_TOKEN}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: List contents of the directory
        run: ls -al

      - name: Clone repository using gh CLI
        run: |
          gh repo clone Rafi98/GH_Actions GH_Actions
          cd GH_Actions

      - name: Display URL Path
        run: |
          echo "Path of the remote URL: https://github.com/${{ github.repository }}/tree/${{ github.ref }}"

  encrypt_decrypt_secret:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install GPG
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

     # Install OpenSSL
      - name: Install OpenSSL
        run: sudo apt-get update && sudo apt-get install -y openssl

     
      
      
      
      
      
      #- name: Install git-crypt
       # run: sudo apt-get install -y git-crypt

      #- name: Generate symmetric key
       # run: git-crypt init -k mykey 


     # - name: Generate symmetric key
      #  run: git-crypt init --force --symmetric

      #- name: Unlock repository with symmetric key
       # run: git-crypt unlock GH_Actions/.github/workflows/

        
      #- name: Unlock git-crypt
       # run: git-crypt unlock

      


     # - name: Decrypt files
      #  run: |
       #   #providing decrypt value
        #  git-crypt unlock <<< "mkuYaDjhEhE7dPmrSCR6ng=="

     # - name: Encrypt value
      #  id: encrypt_value
       # run: |
          # Encrypt the value
        #  encrypted_value: $(echo -n "mkuYaDjhEhE7dPmrSCR6ng==" | gh secret encrypt -R Rafi98/GH_Actions -)
         # echo "::set-output name=encrypted_value::$encrypted_value"
      
      #- name: Update Secret
       # run: |
          # Get the encrypted value from previous step's output
          #encrypted_value="${{ steps.encrypt_value.outputs.encrypted_value }}"

          # Update the encrypted value as a secret
          #gh secret set MY_SECRET --body "$encrypted_value" --repo Rafi98/GH_Actions


      #- name: Log in to GitHub
       # env:
        #  GH_TOKEN: ${{ secrets.GH_PAT }}
        #run: |
         # gh auth login --with-token <<<"${GH_TOKEN}"
 
     
      #- name: Change in Secret Value
       # run: |
          #gh secret list
                         
          # Retrieve and list existing secrets
          #gh secret list --json | jq -r '.[] | "\(.name): \(.value)"'
          
          # Update the secret with the new value
          #gh secret set -R Rafi98/GH_Actions MY_SECRET -b 'Eleven'

          #gh secret set MY_SECRET -b 'mkuYaDjhEhE7dPmrSCR6ng=='

          

        
      - name: Display Changed Secret_Value
        env:
          MY_VAL: ${{ secrets.MY_SECRET }}
        run: |
          import os
          for q in (os.getenv("MY_VAL")):
            print(q)
        shell: python







